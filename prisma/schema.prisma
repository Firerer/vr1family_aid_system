// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// use case 1

model AidRecipient {
  id                 String  @id @default(cuid())
  name               String
  age                Int
  previousAddress    String
  totalFamilyMembers Int
  partnerName        String?
  partnerAge         Int?
  kids               Kid[]
}

model Kid {
  id       String       @id @default(cuid())
  parentId String
  parent   AidRecipient @relation(fields: [parentId], references: [id])
  name     String
  age      Int

  @@index([parentId])
}

// use case 2
model PrivateAidRecipient {
  id                 String  @id @default(cuid())
  name               String
  nationality        String
  idDocumentNumber1  String
  idExpiryDate1      DateTime
  idDocumentNumber2  String?
  idExpiryDate2      DateTime?
  idDocumentNumber3  String?
  idExpiryDate3      DateTime?
}

model Donor {
  id                      String    @id @default(cuid())
  name                    String
  mailingAddress          String
  phoneNumber             String
  email                   String    @unique
  donorType               DonorType
  preferredCommunication  String
  age                     Int?
  organizationHeadquarter String?
  principalContactPerson  String?
  donatedItems DonatedItem[]
}

enum DonorType {
  INDIVIDUAL
  ORGANIZATION
}

model PrivateAidDonor {
  id                 String  @id @default(cuid())
  name               String
  nationality        String
  idDocumentNumber1  String
  idExpiryDate1      DateTime
  idDocumentNumber2  String?
  idExpiryDate2      DateTime?
  idDocumentNumber3  String?
  idExpiryDate3      DateTime?
  donorType          DonorType
  abn                Int?
  otherinfo          String?
}

/// use case 5

enum InventoryStatus {
  LOW
  MEDIUM
  HIGH
  EXCESS
}

model AidCategory {
  id              Int             @id @default(autoincrement())
  name            String          @unique
  inventoryStatus InventoryStatus
  items           AidItem[]
}

// use case 6
model AidItem {
  id              Int         @id @default(autoincrement())
  name            String
  quantity        Int
  aidCategoryId   Int
  aidCategory     AidCategory @relation(fields: [aidCategoryId], references: [id])
  expiryDate      DateTime?
  mainIngredients String?
  allergenInfo    String?
  brand           String?
  numericSize     Float?
  alphabeticSize  String?
  relatedKits     KitItem[]
  donatedItems DonatedItem[]
  @@index([aidCategoryId])
}

model Kit {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  kitItems KitItem[]
}

model KitItem {
  kitId    Int
  itemId   Int
  quantity Int

  item AidItem @relation(fields: [itemId], references: [id])
  kit  Kit     @relation(fields: [kitId], references: [id])

  @@id([itemId, kitId])
  @@index([itemId])
  @@index([kitId])
}
model ItemRequest{
  id       Int       @id @default(autoincrement())
  itemType     String    
  itemCategory String
  itemName String
  quantity Int
  note String
}

model DonatedItem{
  id       Int       @id @default(autoincrement())
  donorId   String
  aidItemId Int
  donor Donor @relation(fields: [donorId], references: [id])
  aidItem AidItem @relation(fields: [aidItemId],references: [id])
  quantity Int
  @@index([donorId])
  @@index([aidItemId])
}